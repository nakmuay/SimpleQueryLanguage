//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Parser/Grammar/MathLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PARENTHESIS=1, RIGHT_PARENTHESIS=2, OP_ADD=3, OP_SUB=4, OP_MUL=5, 
		OP_DIV=6, OP_POW=7, EQ=8, NUM=9, ID=10, WS=11, UNARY_FN_COS=12, UNARY_FN_SIN=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "OP_ADD", "OP_SUB", "OP_MUL", 
		"OP_DIV", "OP_POW", "EQ", "NUM", "ID", "WS", "UNARY_FN_COS", "UNARY_FN_SIN"
	};


	public MathLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'='", null, null, 
		null, "'cos'", "'sin'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "OP_ADD", "OP_SUB", "OP_MUL", 
		"OP_DIV", "OP_POW", "EQ", "NUM", "ID", "WS", "UNARY_FN_COS", "UNARY_FN_SIN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MathLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,81,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,4,8,45,8,8,11,8,12,
		8,46,1,8,1,8,4,8,51,8,8,11,8,12,8,52,3,8,55,8,8,1,8,1,8,3,8,59,8,8,1,8,
		4,8,62,8,8,11,8,12,8,63,3,8,66,8,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,
		11,1,11,1,11,1,12,1,12,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,1,0,5,1,0,48,57,2,0,69,69,101,101,2,
		0,43,43,45,45,2,0,65,90,97,122,3,0,9,10,13,13,32,32,86,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,
		0,11,37,1,0,0,0,13,39,1,0,0,0,15,41,1,0,0,0,17,44,1,0,0,0,19,67,1,0,0,
		0,21,69,1,0,0,0,23,73,1,0,0,0,25,77,1,0,0,0,27,28,5,40,0,0,28,2,1,0,0,
		0,29,30,5,41,0,0,30,4,1,0,0,0,31,32,5,43,0,0,32,6,1,0,0,0,33,34,5,45,0,
		0,34,8,1,0,0,0,35,36,5,42,0,0,36,10,1,0,0,0,37,38,5,47,0,0,38,12,1,0,0,
		0,39,40,5,94,0,0,40,14,1,0,0,0,41,42,5,61,0,0,42,16,1,0,0,0,43,45,7,0,
		0,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,54,1,0,
		0,0,48,50,5,46,0,0,49,51,7,0,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,
		0,0,52,53,1,0,0,0,53,55,1,0,0,0,54,48,1,0,0,0,54,55,1,0,0,0,55,65,1,0,
		0,0,56,58,7,1,0,0,57,59,7,2,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,61,1,0,
		0,0,60,62,7,0,0,0,61,60,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,
		0,0,64,66,1,0,0,0,65,56,1,0,0,0,65,66,1,0,0,0,66,18,1,0,0,0,67,68,7,3,
		0,0,68,20,1,0,0,0,69,70,7,4,0,0,70,71,1,0,0,0,71,72,6,10,0,0,72,22,1,0,
		0,0,73,74,5,99,0,0,74,75,5,111,0,0,75,76,5,115,0,0,76,24,1,0,0,0,77,78,
		5,115,0,0,78,79,5,105,0,0,79,80,5,110,0,0,80,26,1,0,0,0,7,0,46,52,54,58,
		63,65,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
