//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Parser/Grammar/MathLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PARENTHESIS=1, RIGHT_PARENTHESIS=2, OP_ADD=3, OP_SUB=4, OP_MUL=5, 
		OP_DIV=6, OP_POW=7, EQ=8, NUM=9, ID=10, WS=11, UNARY_FN_COS=12, UNARY_FN_SIN=13, 
		UNARY_FN_TAN=14, UNARY_FN_ARCCOS=15, UNARY_FN_ARCSIN=16, UNARY_FN_ARCTAN=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "OP_ADD", "OP_SUB", "OP_MUL", 
		"OP_DIV", "OP_POW", "EQ", "NUM", "ID", "WS", "UNARY_FN_COS", "UNARY_FN_SIN", 
		"UNARY_FN_TAN", "UNARY_FN_ARCCOS", "UNARY_FN_ARCSIN", "UNARY_FN_ARCTAN"
	};


	public MathLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'='", null, null, 
		null, "'cos'", "'sin'", "'tan'", "'arccos'", "'arcsin'", "'arctan'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "OP_ADD", "OP_SUB", "OP_MUL", 
		"OP_DIV", "OP_POW", "EQ", "NUM", "ID", "WS", "UNARY_FN_COS", "UNARY_FN_SIN", 
		"UNARY_FN_TAN", "UNARY_FN_ARCCOS", "UNARY_FN_ARCSIN", "UNARY_FN_ARCTAN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MathLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,114,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,4,8,53,8,8,11,8,12,8,54,1,8,1,8,4,8,59,8,8,11,8,
		12,8,60,3,8,63,8,8,1,8,1,8,3,8,67,8,8,1,8,4,8,70,8,8,11,8,12,8,71,3,8,
		74,8,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,0,0,17,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,1,0,5,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,2,0,65,90,
		97,122,3,0,9,10,13,13,32,32,119,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,
		0,0,0,7,41,1,0,0,0,9,43,1,0,0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,49,1,0,
		0,0,17,52,1,0,0,0,19,75,1,0,0,0,21,77,1,0,0,0,23,81,1,0,0,0,25,85,1,0,
		0,0,27,89,1,0,0,0,29,93,1,0,0,0,31,100,1,0,0,0,33,107,1,0,0,0,35,36,5,
		40,0,0,36,2,1,0,0,0,37,38,5,41,0,0,38,4,1,0,0,0,39,40,5,43,0,0,40,6,1,
		0,0,0,41,42,5,45,0,0,42,8,1,0,0,0,43,44,5,42,0,0,44,10,1,0,0,0,45,46,5,
		47,0,0,46,12,1,0,0,0,47,48,5,94,0,0,48,14,1,0,0,0,49,50,5,61,0,0,50,16,
		1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,
		1,0,0,0,55,62,1,0,0,0,56,58,5,46,0,0,57,59,7,0,0,0,58,57,1,0,0,0,59,60,
		1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,56,1,0,0,0,62,63,
		1,0,0,0,63,73,1,0,0,0,64,66,7,1,0,0,65,67,7,2,0,0,66,65,1,0,0,0,66,67,
		1,0,0,0,67,69,1,0,0,0,68,70,7,0,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,
		1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,64,1,0,0,0,73,74,1,0,0,0,74,18,
		1,0,0,0,75,76,7,3,0,0,76,20,1,0,0,0,77,78,7,4,0,0,78,79,1,0,0,0,79,80,
		6,10,0,0,80,22,1,0,0,0,81,82,5,99,0,0,82,83,5,111,0,0,83,84,5,115,0,0,
		84,24,1,0,0,0,85,86,5,115,0,0,86,87,5,105,0,0,87,88,5,110,0,0,88,26,1,
		0,0,0,89,90,5,116,0,0,90,91,5,97,0,0,91,92,5,110,0,0,92,28,1,0,0,0,93,
		94,5,97,0,0,94,95,5,114,0,0,95,96,5,99,0,0,96,97,5,99,0,0,97,98,5,111,
		0,0,98,99,5,115,0,0,99,30,1,0,0,0,100,101,5,97,0,0,101,102,5,114,0,0,102,
		103,5,99,0,0,103,104,5,115,0,0,104,105,5,105,0,0,105,106,5,110,0,0,106,
		32,1,0,0,0,107,108,5,97,0,0,108,109,5,114,0,0,109,110,5,99,0,0,110,111,
		5,116,0,0,111,112,5,97,0,0,112,113,5,110,0,0,113,34,1,0,0,0,7,0,54,60,
		62,66,71,73,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
