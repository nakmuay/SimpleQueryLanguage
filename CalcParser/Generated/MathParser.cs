//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Parser/Grammar/MathParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PARENTHESIS=1, RIGHT_PARENTHESIS=2, OP_ADD=3, OP_SUB=4, OP_MUL=5, 
		OP_DIV=6, OP_POW=7, EQ=8, NUM=9, ID=10, WS=11, UNARY_FN_COS=12, UNARY_FN_SIN=13, 
		UNARY_FN_TAN=14, UNARY_FN_ARCCOS=15, UNARY_FN_ARCSIN=16, UNARY_FN_ARCTAN=17;
	public const int
		RULE_equation = 0, RULE_expr = 1, RULE_ufunc = 2;
	public static readonly string[] ruleNames = {
		"equation", "expr", "ufunc"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'='", null, null, 
		null, "'cos'", "'sin'", "'tan'", "'arccos'", "'arcsin'", "'arctan'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "OP_ADD", "OP_SUB", "OP_MUL", 
		"OP_DIV", "OP_POW", "EQ", "NUM", "ID", "WS", "UNARY_FN_COS", "UNARY_FN_SIN", 
		"UNARY_FN_TAN", "UNARY_FN_ARCCOS", "UNARY_FN_ARCSIN", "UNARY_FN_ARCTAN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MathParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EquationContext : ParserRuleContext {
		public ExprContext left;
		public IToken eq;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MathParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MathParser.EQ, 0); }
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 0, RULE_equation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			_localctx.left = expr(0);
			State = 7;
			_localctx.eq = Match(EQ);
			State = 8;
			_localctx.right = expr(0);
			State = 9;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableExprContext : ExprContext {
		public IToken coeff;
		public IToken var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MathParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MathParser.ID, 0); }
		public VariableExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(MathParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(MathParser.OP_SUB, 0); }
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_POW() { return GetToken(MathParser.OP_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(MathParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(MathParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(MathParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(MathParser.OP_SUB, 0); }
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MathParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MathParser.RIGHT_PARENTHESIS, 0); }
		public ParensExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExprContext : ExprContext {
		public UfuncContext function;
		public ExprContext arg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MathParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MathParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UfuncContext ufunc() {
			return GetRuleContext<UfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FunctionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MathParser.NUM, 0); }
		public ConstantExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new ParensExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 12;
				Match(LEFT_PARENTHESIS);
				State = 13;
				expr(0);
				State = 14;
				Match(RIGHT_PARENTHESIS);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16;
				((UnaryExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					((UnaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 17;
				expr(8);
				}
				break;
			case 3:
				{
				_localctx = new FunctionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18;
				((FunctionExprContext)_localctx).function = ufunc();
				State = 19;
				Match(LEFT_PARENTHESIS);
				State = 20;
				((FunctionExprContext)_localctx).arg = expr(0);
				State = 21;
				Match(RIGHT_PARENTHESIS);
				}
				break;
			case 4:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				((ConstantExprContext)_localctx).value = Match(NUM);
				}
				break;
			case 5:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				((VariableExprContext)_localctx).coeff = Match(NUM);
				State = 25;
				((VariableExprContext)_localctx).var = Match(ID);
				}
				break;
			case 6:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				((VariableExprContext)_localctx).var = Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 38;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 29;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 30;
						((BinaryExprContext)_localctx).op = Match(OP_POW);
						State = 31;
						((BinaryExprContext)_localctx).right = expr(8);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 32;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 33;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_MUL || _la==OP_DIV) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 34;
						((BinaryExprContext)_localctx).right = expr(7);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 35;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 36;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_ADD || _la==OP_SUB) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37;
						((BinaryExprContext)_localctx).right = expr(6);
						}
						break;
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UfuncContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY_FN_COS() { return GetToken(MathParser.UNARY_FN_COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY_FN_SIN() { return GetToken(MathParser.UNARY_FN_SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY_FN_TAN() { return GetToken(MathParser.UNARY_FN_TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY_FN_ARCCOS() { return GetToken(MathParser.UNARY_FN_ARCCOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY_FN_ARCSIN() { return GetToken(MathParser.UNARY_FN_ARCSIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY_FN_ARCTAN() { return GetToken(MathParser.UNARY_FN_ARCTAN, 0); }
		public UfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ufunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathParserVisitor<TResult> typedVisitor = visitor as IMathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UfuncContext ufunc() {
		UfuncContext _localctx = new UfuncContext(Context, State);
		EnterRule(_localctx, 4, RULE_ufunc);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNARY_FN_COS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				_localctx.name = Match(UNARY_FN_COS);
				}
				break;
			case UNARY_FN_SIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				_localctx.name = Match(UNARY_FN_SIN);
				}
				break;
			case UNARY_FN_TAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45;
				_localctx.name = Match(UNARY_FN_TAN);
				}
				break;
			case UNARY_FN_ARCCOS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46;
				_localctx.name = Match(UNARY_FN_ARCCOS);
				}
				break;
			case UNARY_FN_ARCSIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 47;
				_localctx.name = Match(UNARY_FN_ARCSIN);
				}
				break;
			case UNARY_FN_ARCTAN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48;
				_localctx.name = Match(UNARY_FN_ARCTAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,17,52,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,28,8,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,2,1,2,1,2,1,2,1,
		2,1,2,3,2,50,8,2,1,2,0,1,2,3,0,2,4,0,2,1,0,3,4,1,0,5,6,61,0,6,1,0,0,0,
		2,27,1,0,0,0,4,49,1,0,0,0,6,7,3,2,1,0,7,8,5,8,0,0,8,9,3,2,1,0,9,10,5,0,
		0,1,10,1,1,0,0,0,11,12,6,1,-1,0,12,13,5,1,0,0,13,14,3,2,1,0,14,15,5,2,
		0,0,15,28,1,0,0,0,16,17,7,0,0,0,17,28,3,2,1,8,18,19,3,4,2,0,19,20,5,1,
		0,0,20,21,3,2,1,0,21,22,5,2,0,0,22,28,1,0,0,0,23,28,5,9,0,0,24,25,5,9,
		0,0,25,28,5,10,0,0,26,28,5,10,0,0,27,11,1,0,0,0,27,16,1,0,0,0,27,18,1,
		0,0,0,27,23,1,0,0,0,27,24,1,0,0,0,27,26,1,0,0,0,28,40,1,0,0,0,29,30,10,
		7,0,0,30,31,5,7,0,0,31,39,3,2,1,8,32,33,10,6,0,0,33,34,7,1,0,0,34,39,3,
		2,1,7,35,36,10,5,0,0,36,37,7,0,0,0,37,39,3,2,1,6,38,29,1,0,0,0,38,32,1,
		0,0,0,38,35,1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,3,1,0,
		0,0,42,40,1,0,0,0,43,50,5,12,0,0,44,50,5,13,0,0,45,50,5,14,0,0,46,50,5,
		15,0,0,47,50,5,16,0,0,48,50,5,17,0,0,49,43,1,0,0,0,49,44,1,0,0,0,49,45,
		1,0,0,0,49,46,1,0,0,0,49,47,1,0,0,0,49,48,1,0,0,0,50,5,1,0,0,0,4,27,38,
		40,49
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
